#Робота з матрицями. Для заданого  масиву цілих чисел (довжина > 10*10, генеровані випадковим чином) знайти мінімальне значення, максимальне значення, впорядкувати масив за правилом:
#Вивести масиви.

import numpy as np

SIZE = (11, 11)

arr = np.random.randint(1, 200, SIZE)
arr

"""
array([[191, 172,  48, 179,  28,   3,  93,   8, 128,  78, 147],
       [ 89, 150, 111, 150, 138, 121,  78, 166,  80,  92, 163],
       [199, 159,  49, 107,  45,  28,  42,  76, 157, 132,  29],
       [117,   8, 155,  17,  39,  30, 122,  14,  59,  25, 121],
       [157,  14,  31,  37,  54,  58, 114,  64, 177, 189, 110],
       [ 37,   2, 103,  69, 144, 159,  59, 108, 196, 158, 161],
       [120,  85,  15,  85,  25,  76, 149,  94, 195,  59, 140],
       [144,  74, 163,  37,  71,  10, 176,  17, 103, 165, 106],
       [ 63, 163,  48, 142, 178, 180, 196, 175, 171,  24, 109],
       [  8,  32, 181,  22,  40,  18, 132,  56,  88,  60, 166],
       [100, 148,  95,  24, 175, 199,  99, 190,  47,  27, 151]])

"""

#А):

arr_A = np.sort(arr, axis = 1)
print(arr_A)

"""
[[  3   8  28  48  78  93 128 147 172 179 191]
 [ 78  80  89  92 111 121 138 150 150 163 166]
 [ 28  29  42  45  49  76 107 132 157 159 199]
 [  8  14  17  25  30  39  59 117 121 122 155]
 [ 14  31  37  54  58  64 110 114 157 177 189]
 [  2  37  59  69 103 108 144 158 159 161 196]
 [ 15  25  59  76  85  85  94 120 140 149 195]
 [ 10  17  37  71  74 103 106 144 163 165 176]
 [ 24  48  63 109 142 163 171 175 178 180 196]
 [  8  18  22  32  40  56  60  88 132 166 181]
 [ 24  27  47  95  99 100 148 151 175 190 199]]
"""

#Б):
arr_B = np.sort(arr, axis = 0)
print(arr_B)

"""
[[  8   2  15  17  25   3  42   8  47  24  29]
 [ 37   8  31  22  28  10  59  14  59  25 106]
 [ 63  14  48  24  39  18  78  17  80  27 109]
 [ 89  32  48  37  40  28  93  56  88  59 110]
 [100  74  49  37  45  30  99  64 103  60 121]
 [117  85  95  69  54  58 114  76 128  78 140]
 [120 148 103  85  71  76 122  94 157  92 147]
 [144 150 111 107 138 121 132 108 171 132 151]
 [157 159 155 142 144 159 149 166 177 158 161]
 [191 163 163 150 175 180 176 175 195 165 163]
 [199 172 181 179 178 199 196 190 196 189 166]]
"""
#Перетворимо матрицю в одновимірний масив та відсортуємо для подальших завдань

arr_asc = arr.flatten()
arr_asc.sort()
print(arr_asc)

"""
[  2   3   8   8   8  10  14  14  15  17  17  18  22  24  24  25  25  27
  28  28  29  30  31  32  37  37  37  39  40  42  45  47  48  48  49  54
  56  58  59  59  59  60  63  64  69  71  74  76  76  78  78  80  85  85
  88  89  92  93  94  95  99 100 103 103 106 107 108 109 110 111 114 117
 120 121 121 122 128 132 132 138 140 142 144 144 147 148 149 150 150 151
 155 157 157 158 159 159 161 163 163 163 165 166 166 171 172 175 175 176
 177 178 179 180 181 189 190 191 195 196 196 199 199]
"""

#B):

arr_C = np.empty_like(arr)

x_start, y_start = 0, 0
x_end, y_end = SIZE
arr_asc_it = iter(arr_asc)
while x_start != x_end or y_start != y_end:
  # =>
  for i in range (y_start, y_end):
    arr_C[x_start][i] = next(arr_asc_it)
  x_start += 1
  
  # ||
  # \/
  if x_start == x_end or y_start == y_end:
    break
  for i in range(x_start, x_end):
    arr_C[i, y_end - 1] = next(arr_asc_it)
  y_end -= 1
  
  # <=
  if x_start == x_end or y_start == y_end:
    break
  for i in range(y_end - 1, y_start - 1, -1):
    arr_C[x_end - 1, i] = next(arr_asc_it)
  x_end -= 1
  
  # /\
  # ||
  if x_start == x_end or y_start == y_end:
    break
  for i in range(x_end - 1, x_start - 1, -1):
    arr_C[i, y_start] = next(arr_asc_it)
  y_start += 1

print(arr_C)

"""
[[  2   3   8   8   8  10  14  14  15  17  17]
 [ 59  59  60  63  64  69  71  74  76  76  18]
 [ 59 117 120 121 121 122 128 132 132  78  22]
 [ 58 114 159 161 163 163 163 165 138  78  24]
 [ 56 111 159 180 181 189 190 166 140  80  24]
 [ 54 110 158 179 199 199 191 166 142  85  25]
 [ 49 109 157 178 196 196 195 171 144  85  25]
 [ 48 108 157 177 176 175 175 172 144  88  27]
 [ 48 107 155 151 150 150 149 148 147  89  28]
 [ 47 106 103 103 100  99  95  94  93  92  28]
 [ 45  42  40  39  37  37  37  32  31  30  29]]

"""

#Г):
cent = (SIZE[0] // 2, (SIZE[1] + 1)// 2 - 1)
n = SIZE[0]
m = SIZE[1]
if not (cent[0] == cent[1] or cent[0] + 1 == cent[1]):
  print(f"Impossible for this size: {SIZE}")
  exit()

arr_D = np.empty_like(arr)

up_bord = cent[0] - 1 
down_bord = cent[0] + 1 
left_bord = cent[1] - 1
right_bord = cent[1] + 1

arr_asc_it = iter(arr_asc)
cur_x = cent[0]
cur_y = cent[1]
while up_bord >= -1 and down_bord <= n  and left_bord >= -1 and right_bord <= m:
  # /\
  # ||
  for i in range(cur_x, up_bord, -1):
    arr_D[i, cur_y] = next(arr_asc_it)
  cur_x = up_bord
  up_bord -= 1
  if up_bord >= -1 and down_bord <= n  and left_bord >= -1 and right_bord <= m:
  # =>
    for i in range(cur_y, right_bord):
      arr_D[cur_x, i] = next(arr_asc_it)
    cur_y = right_bord
    right_bord += 1
  # ||
  # \/
  if up_bord >= -1 and down_bord <= n  and left_bord >= -1 and right_bord <= m:
    for i in range(cur_x, down_bord):
      arr_D[i, cur_y] = next(arr_asc_it)
    cur_x = down_bord
    down_bord += 1
  # <=
  if up_bord >= -1 and down_bord <= n  and left_bord >= -1 and right_bord <= m:
    for i in range(cur_y, left_bord, -1):
      arr_D[cur_x, i] = next(arr_asc_it)
    cur_y = left_bord
    left_bord -= 1

print(arr_D)

"""
[[199 142 144 144 147 148 149 150 150 151 155]
 [199 140  78  78  80  85  85  88  89  92 157]
 [196 138  76  37  37  39  40  42  45  93 157]
 [196 132  76  37  17  17  18  22  47  94 158]
 [195 132  74  32  15   3   8  24  48  95 159]
 [191 128  71  31  14   2   8  24  48  99 159]
 [190 122  69  30  14  10   8  25  49 100 161]
 [189 121  64  29  28  28  27  25  54 103 163]
 [181 121  63  60  59  59  59  58  56 103 163]
 [180 120 117 114 111 110 109 108 107 106 163]
 [179 178 177 176 175 175 172 171 166 166 165]]
"""

#Д):

arr_E = np.empty_like(arr)
arr_asc_it = iter(arr_asc)

for i in range(SIZE[0]):
  if i % 2 == 0:
    for j in range(SIZE[1]):
      arr_E[i, j] = next(arr_asc_it)
  else:
    for j in range(SIZE[1] - 1, -1, -1):
      arr_E[i, j] = next(arr_asc_it)
  
print(arr_E)

"""
[[  2   3   8   8   8  10  14  14  15  17  17]
 [ 30  29  28  28  27  25  25  24  24  22  18]
 [ 31  32  37  37  37  39  40  42  45  47  48]
 [ 64  63  60  59  59  59  58  56  54  49  48]
 [ 69  71  74  76  76  78  78  80  85  85  88]
 [107 106 103 103 100  99  95  94  93  92  89]
 [108 109 110 111 114 117 120 121 121 122 128]
 [150 149 148 147 144 144 142 140 138 132 132]
 [150 151 155 157 157 158 159 159 161 163 163]
 [178 177 176 175 175 172 171 166 166 165 163]
 [179 180 181 189 190 191 195 196 196 199 199]]
"""
